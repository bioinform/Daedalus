import argparse
import logging
import os
import re
import pandas as pd
from yattag import Doc

from folder_walker import FolderWalker


class HtmlGenerator:
    """Generate static html page based on sample info parsed from manifest file.

    Attributes
    ----------
    version : str
        Pipeline version. For displaying.
    project : str
        Name of the project. Used for displaying.
    dir_name : str
        Output directory path relative to the Nextflow working directory. Used to construct relative link.
    dir_path : str
        Output directory path.
    samples : list
        List of sample names. Used for displaying and constructing url link.
    doc : object
        Html doc generated by yattag.
    """

    def __init__(self, version, project, dir_name, dir_path, sample_info):
        self.sample_info = sample_info
        self.version = version
        self.project = project
        self.dir_name = dir_name
        self.dir_path = dir_path
        self.samples = self._get_samples()
        self.doc = self._generate_html()

    def write_html(self, fname):
        """Write generated html file.

        Returns
        -------
        None
        """
        with open(fname, 'w') as f:
            f.write(self.doc.getvalue())

    def _generate_html(self):
        """Generate html doc based on sample info.

        Returns
        -------
        doc : object
            Html doc generated by yattag.
        """
        doc, tag, text = Doc().tagtext()

        doc.asis('<!DOCTYPE html>')
        with tag('html'):
            with tag('head'):
                with tag('title'):
                    text(self.project)
                with tag('style'):
                    doc.asis(
                        '.jstree-anchor { max-width: 100%; text-overflow: ellipsis; overflow:hidden; }')
                    doc.asis(
                        '.block-content { overflow: auto; border-color: #dfdfdf; border-style: solid; border-width: 0 1px 1px 1px; padding: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.04), 0 1px 4px rgba(0,0,0,0.12); height: 100%; }')
                doc.stag('link', rel='stylesheet',
                         href='https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css')
                doc.stag('link', rel='stylesheet',
                         href='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css')
                doc.stag('link', rel='stylesheet',
                         href='https://use.fontawesome.com/releases/v5.2.0/css/all.css')

            with tag('body'):
                with tag('div', klass='container-fluid'):
                    with tag('h1'):
                        text(self.project)

                    with tag('p', style='color:grey;font-size:120%;'):
                        text('Pipeline version: {}'.format(self.version))

                    with tag('div', klass='row content'):
                        with tag('div', klass='col-sm-4 sidenav'):
                            with tag('div', klass='block-content'):
                                '''
                                Alignment report and stats
                                '''
                                with tag('h2'):
                                    text('Reports')
                                with tag('div', id='report_tree'):
                                    with tag('ul'):
                                        with tag('li'):
                                            with tag('a', href=os.path.join(self.dir_name, 'sample_report/alignment_metrics.csv')):
                                                text('Sample Metrics')
                                        with tag('li'):
                                            with tag('a', href=os.path.join(self.dir_name, 'sample_report/dedup_filt.csv')):
                                                text('Dedup Filtered Summary')
                                        with tag('li'):
                                            with tag('a', href=os.path.join(self.dir_name, 'sample_report/sample_metrics.csv')):
                                                text('Sample Metrics')
                                        with tag('li'):
                                            with tag('a', href=os.path.join(self.dir_name, 'sample_report/spikein_alignment_metrics.csv')):
                                                text('Spikein Metrics')
                                '''
                                Sample Metrics
                                '''
                                with tag('h2'):
                                    text('Metrics')
                                with tag('div', id='metrics_tree'):
                                    with tag('ul'):
                                        with tag('li'):
                                            text('Sample Stats')
                                            with tag('ul'):
                                                for i, sample in enumerate(self.samples):
                                                    with tag('li', klass='file_type'):
                                                        with tag('a', href=os.path.join(self.dir_name, sample, 'metrics', sample + '_VJ_alignment_summary.csv')):
                                                            text(sample + '_VJ_alignment_summary.csv')
                                        if 'checkSpikeIn' not in self.sample_info or any(self.sample_info['checkSpikeIn']):
                                            with tag('li'):
                                                text('Spikein Stats')
                                                with tag('ul'):
                                                    for i, sample in enumerate(self.samples):
                                                        if 'checkSpikeIn' not in self.sample_info or self.sample_info['checkSpikeIn'].iloc[i]:
                                                            with tag('li', klass='file_type'):
                                                                with tag('a', href=os.path.join(self.dir_name, sample, 'spikein_metrics', sample + '_spikein_stats.csv')):
                                                                    text(
                                                                        sample + '_spikein_stats.csv')
                                '''
                                All files
                                '''
                                with tag('h2'):
                                    text('All Results')
                                with tag('div', id='raw_tree'):
                                    pass

                        with tag('div', klass='col-sm-8 text-left'):
                            with tag('div', klass='block-content', id='result_container'):
                                pass

                    '''
                    Pipeline log
                    '''
                    with tag('div', klass='content block-content mt-3'):
                        with tag('h2'):
                            text('Log')
                        with tag('a', href='nextflow.log', klass='btn btn-outline-secondary', role='button'):
                            text('nextflow.log')
                        with tag('h2'):
                            text('Timeline')
                        with tag('div', klass='embed-responsive embed-responsive-21by9'):
                            with tag('iframe', klass='embed-responsive-item', src='timeline.html'):
                                pass

                with tag('script', src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js'):
                    pass
                with tag('script', src='https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js'):
                    pass
                with tag('script', src='https://d3js.org/d3.v5.min.js'):
                    pass
                with tag('script', src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js'):
                    pass
                with tag('script', src='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js'):
                    pass
                with tag('script'):
                    doc.asis('''
                    $(function () {
                        $('.file_type').attr('data-jstree', '{"icon" : "far fa-file"}');
                        $('#qc_tree').jstree({
                            'core' : {
                                "themes": {
                                    "dots": false,
                                },
                            },
                            "types" : {
                                "default" : {
                                    "icon" : "far fa-folder"
                                },
                            },
                            "plugins" : [ "types" ]
                    });
                        $('#qc_tree').on('changed.jstree', function (e, data) {
                            var r = data.instance.get_node(data.selected[0]).a_attr.href;
                            if (r.match(/.pdf$/)) {
                                $('#result_container').html('<div class="embed-responsive embed-responsive-1by1"><embed src=' + r + ' /></div>');
                            } else if (r.match(/.csv$/)) {
                                $('#result_container').html(show_csv(r));
                            }
                        });
                    });

                    $(function () {
                        $('.file_type').attr('data-jstree', '{"icon" : "far fa-file"}');
                        $('#clone_tree').jstree({
                            'core' : {
                                "themes": {
                                    "dots": false,
                                },
                            },
                            "types" : {
                                "default" : {
                                    "icon" : "far fa-folder"
                                },
                            },
                            "plugins" : [ "types" ]
                    });
                        $('#clone_tree').on('changed.jstree', function (e, data) {
                            var r = data.instance.get_node(data.selected[0]).a_attr.href;
                            if (r.match(/.pdf$/)) {
                                $('#result_container').html('<div class="embed-responsive embed-responsive-1by1"><embed src=' + r + ' /></div>');
                            } else if (r.match(/.csv$/)) {
                                $('#result_container').html(show_csv(r));
                            }
                        });
                    });
                    
                    $(function () {
                        $('.file_type').attr('data-jstree', '{"icon" : "far fa-file"}');
                        $('#report_tree').jstree({
                            'core' : {
                                "themes": {
                                    "dots": false,
                                },
                            },
                            "types" : {
                                "default" : {
                                    "icon" : "far fa-file"
                                },
                            },
                            "plugins" : [ "types" ]
                    });
                        $('#report_tree').on('changed.jstree', function (e, data) {
                            var r = data.instance.get_node(data.selected[0]).a_attr.href;
                            if (r.match(/.pdf$/)) {
                                $('#result_container').html('<div class="embed-responsive embed-responsive-1by1"><embed src=' + r + ' /></div>');
                            } else if (r.match(/.csv$/)) {
                                $('#result_container').html(show_csv(r));
                            }
                        });
                    });

                    $(function () {
                        $('.file_type').attr('data-jstree', '{"icon" : "far fa-file"}');
                        $('#metrics_tree').jstree({
                            'core' : {
                                "themes": {
                                    "dots": false,
                                },
                            },
                            "types" : {
                                "default" : {
                                    "icon" : "far fa-folder"
                                },
                            },
                            "plugins" : [ "types" ]
                    });
                        $('#metrics_tree').on('changed.jstree', function (e, data) {
                            var r = data.instance.get_node(data.selected[0]).a_attr.href;
                            if (r.match(/.pdf$/)) {
                                $('#result_container').html('<div class="embed-responsive embed-responsive-1by1"><embed src=' + r + ' /></div>');
                            } else if (r.match(/.csv$/)) {
                                $('#result_container').html(show_csv(r));
                            }
                        });
                    });

                    $('#raw_tree').jstree({
                        'core' : {
                            'data' : {
                                "url" : "folder_struct.json",
                                "dataType" : "json",
                            },
                            "themes": {
                                "dots": false,
                            },
                        },
                        "types" : {
                            "default" : {
                                "icon" : "far fa-folder"
                            },
                        },
                        "plugins" : [ "types" ]
                    });
                    $('#raw_tree').bind("select_node.jstree", function (e, data) {
                        var href = data.node.a_attr.href;
                        window.location.href = href;
                    });

                    function show_csv(csvFile) {
                        d3.text(csvFile).then(function(data) {
                            var parsedCSV = d3.csvParseRows(data);
        
                            $("#result_container").empty();
        
                            var container = d3.select("#result_container")
                                              .append("table")
                                              .attr("class","table table-hover")
                                              .append("tbody")
                                              .selectAll("tr")
                                              .data(parsedCSV).enter()
                                              .append("tr")
                                              .selectAll("td")
                                              .data(function(d) { return d; }).enter()
                                              .append("td")
                                              .text(function(d) { return d; });

                            return container;
                        });
                    };
                    ''')

        return doc

    def write_folder_struct(self, fname):
        fw = FolderWalker(self.dir_path)
        fw.to_json(fname)

    def _get_samples(self):
        """Get a list of samples.

        Returns
        -------
        samples : list
            List of sample names.
        """
        samples = []
        if 'sample' in self.sample_info:
            samples = list(map(str, self.sample_info['sample'].tolist()))
        else:
            for fastq in self.sample_info['read1']:
                sample = os.path.basename(fastq)
                sample = re.sub(r'_R[12]_.+', '', sample)
                samples.append(sample)
        return samples


def main():
    parser = argparse.ArgumentParser(description="""Generate HTML page based on sample_info.csv.""")
    parser.add_argument('version',
                        help='Pipeline version for displaying.')
    parser.add_argument('project',
                        help='Project name. Used for generating the title of HTML page.')
    parser.add_argument('dir_name',
                        help='Result directory name, relative to the project folder.')
    parser.add_argument('dir_path',
                        help='Result directory path.')
    parser.add_argument('sample_info',
                        help='Csv file contains sample info.')
    parser.add_argument('ofname',
                        help='Output HTML file.')
    args = parser.parse_args()

    sample_info = pd.read_csv(args.sample_info)
    hg = HtmlGenerator(args.version, args.project, args.dir_name, args.dir_path, sample_info)
    hg.write_html(args.ofname)
    folder_struct_json = os.path.join(os.path.dirname(args.ofname), 'folder_struct.json')
    hg.write_folder_struct(folder_struct_json)


if __name__ == '__main__':
    main()
